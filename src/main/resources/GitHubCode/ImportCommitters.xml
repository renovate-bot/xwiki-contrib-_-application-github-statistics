<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>GitHubCode</web>
  <name>ImportCommitters</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>GitHubCode.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1329505527000</creationDate>
  <date>1329556590000</date>
  <contentUpdateDate>1329556590000</contentUpdateDate>
  <version>1.1</version>
  <title>Import Committers</title>
  <template/>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content>Import committers from GitHub into this wiki.

{{groovy}}
import groovy.json.*

if (request.import == "1") {
  // Perform the import
  // Start by getting all committer ids with dups
  def committerIds = [:] as Map
  def repoData = xwiki.queryManager.xwql("select distinct repo.organization, repo.id from Document doc, doc.object(GitHubCode.RepositoryClass) as repo").execute()
  repoData.each() { repo -&gt;
    // Find all committers for a repository
    def collaboratorsJSON = new JsonSlurper().parseText("https://api.github.com/repos/${repo[0]}/${repo[1]}/collaborators".toURL().text)
    collaboratorsJSON.each() { collaborator -&gt;
      def repos = committerIds.get(collaborator.login)
      if (repos == null) {
          repos = []
          committerIds.put(collaborator.login, repos)
      }
      repos.add(repo[1])
    }
  }
  // For all Committer id, find committer data
  committerIds.each() { id, repos -&gt;
    // Find data for a collaborator
    def userJSON = new JsonSlurper().parseText("https://api.github.com/users/${java.net.URLEncoder.encode(id)}".toURL().text)
    def committerDoc = xwiki.getDocument("GitHub", "${id} Committer")
    if (committerDoc.isNew()) {
      committerDoc.setTitle("Committer [${id}]")
      committerDoc.setParent("GitHub.WebHome")
      def committerObject = committerDoc.newObject("GitHubCode.CommitterClass")
      committerDoc.set("id", id)
      committerDoc.set("avatar", userJSON.avatar_url)
      committerDoc.set("repositories", repos)
      committerDoc.set("aliases", [])
      committerDoc.set("name", userJSON.name)
      committerDoc.save("Imported Committer [${id}]", true)
      println "* Committer [${id}] imported"
    } else {
      println "* Committer [${id}] already exists, not imported"
    }
  }
} else if (request.delete == "1") {
  def committerData = xwiki.queryManager.xwql("from doc.object(GitHubCode.CommitterClass) as repo").execute()
  committerData.each() {
    xwiki.getDocument(it).deleteDocument()
    println "* Committer [${it}] deleted"
  }
} else {
  println "[[Import all Committers&gt;&gt;||queryString='import=1']] for all Repositories defined in this wiki."
  println "[[Delete all committers&gt;&gt;||queryString='delete=1']]."
}
{{/groovy}}

{{include reference="GitHubCode.ListCommitters"/}}

</content>
</xwikidoc>
