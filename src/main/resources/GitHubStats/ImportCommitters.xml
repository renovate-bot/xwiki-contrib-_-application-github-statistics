<?xml version="1.0" encoding="UTF-8"?>

<xwikidoc>
  <web>GitHubStats</web>
  <name>ImportCommitters</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>GitHubStats.WebHome</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1382361556000</creationDate>
  <date>1382373540000</date>
  <contentUpdateDate>1382373540000</contentUpdateDate>
  <version>1.1</version>
  <title>Import Committers</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>Import committers from GitHub into this wiki.

{{groovy}}
import groovy.json.*

/**
  * Allow calling GitHub API and passing a userid/password
  * See https://help.github.com/articles/creating-an-access-token-for-command-line-use to generate a personal token
  * Then pass the following in the URL for this page: ?auth=&lt;userid&gt;:&lt;token or password&gt;
  */
def parseJSON(String url)
{
    def conn = url.toURL().openConnection()
    if (request.auth) {
      def authString = request.auth.getBytes().encodeBase64().toString()
      conn.setRequestProperty( "Authorization", "Basic ${authString}" )
    }
    return new JsonSlurper().parseText(conn.content.text)
}

if (request.import == "1") {
  // Perform the import
  // Start by getting all committer ids with dups
  def committerIds = [:] as Map
  def repoData = xwiki.queryManager.xwql("select distinct repo.organization, repo.id from Document doc, doc.object(GitHubStats.RepositoryClass) as repo").execute()
  repoData.each() { repo -&gt;
    // Find all committers for a repository
    def collaboratorsJSON = parseJSON("https://api.github.com/repos/${repo[0]}/${repo[1]}/collaborators")
    collaboratorsJSON.each() { collaborator -&gt;
      def repos = committerIds.get(collaborator.login)
      if (repos == null) {
          repos = []
          committerIds.put(collaborator.login, repos)
      }
      repos.add(repo[1])
    }
  }
  // For all Committer id, find committer data
  committerIds.each() { id, repos -&gt;
    // Find data for a collaborator
    // Only add data if the user isn't already imported (we do this to save Requests to GitHub since there's a limit of 60/hour)
    def committerDoc = xwiki.getDocument("GitHubStats", "${id} Committer")
    if (committerDoc.isNew() || request.overwrite) {
      def userJSON = parseJSON("https://api.github.com/users/${java.net.URLEncoder.encode(id)}")
      committerDoc.setTitle("Committer [${id}]")
      committerDoc.setParent("GitHubStats.WebHome")
      // If there's an existing CommitterClass xobject then reuse it
      def committerObject = committerDoc.getObject("GitHubStats.CommitterClass", true)
      committerDoc.use("GitHubStats.CommitterClass")
      committerDoc.set("id", id)
      committerDoc.set("avatar", userJSON.avatar_url)
      committerDoc.set("repositories", repos)
      committerDoc.set("name", userJSON.name)
      committerDoc.set("profileurl", userJSON.html_url) 
      committerDoc.set("company", userJSON. company) 
      def aliases = committerDoc.getValue('aliases')
      if (!aliases) {
        committerDoc.set("aliases", []) 
      }
      committerDoc.save("Imported Committer [${id}]", true)
      println "* Committer [${id}] imported"
    }
  }
} else if (request.delete == "1") {
  def committerData = xwiki.queryManager.xwql("from doc.object(GitHubStats.CommitterClass) as repo").execute()
  committerData.each() {
    xwiki.getDocument(it).deleteDocument()
    println "* Committer [${it}] deleted"
  }
} else {
  println "[[Import all Committers&gt;&gt;||queryString='import=1']] for all Repositories defined in this wiki (Committers already imported are skipped unless you pass the ##overwrite## parameter in the URL)."
  println "[[Delete all committers&gt;&gt;||queryString='delete=1']]."
  println ""
  println """\
{{info}}
[[GitHub API supports 60 requests per hour&gt;&gt;http://developer.github.com/v3/#rate-limiting]]. If you get an error you'll need to authenticate yourself by [[creating a personal access token&gt;&gt;https://help.github.com/articles/creating-an-access-token-for-command-line-use]] and then pass it in the URL as a parameter using the format ##auth=&lt;userid&gt;:&lt;token or password&gt;##
{{/info}}
"""
}
{{/groovy}}

{{include reference="GitHubStats.ListCommitters"/}}</content>
</xwikidoc>
